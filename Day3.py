input='''lDDWVvlVVQfDMlWjGJTRjQCgTGLCLj
ZLZpwzLBhwZhSLBsjntGCtgJRjbnJgSG
qppdZzzsdsmZphrNsNwZhllDHLcVVDWFPvFWcWdFlv
ztdhgJDBJghmQtPFQPpmbw
lVlLRcnfllcfVcccGnSQVLcsTPFbpwsPFspTSqmbpswpbF
cCHRGcGcCRGlGrGcVGnrdWHWBDzBNhhQZWWNBhJz
NfnSSQpdnRSSpvWdSsjZDGNDjGDwTGTjHG
wlPzPqzPFbMmqPCFCJmbsjbHLDDHDZjDjbGHsT
gwMlgmtmPcqVVvhVnvcRnn
cBNBBCHhbhNhblBcCCvcBHSwTwDQSqRwDQpDRsjHST
dPmzMVWdmmMnnZJtZVdqjTSrjTjrpQrsTTVwQRSj
qzmZMmdZPtnGqclblGlbGvgBFc
ZfpmNDfRhzbbqDnD
SFtFjTTZVTFvVTjHrsVvqGBJqhnSSnbJznLGJwJq
TjdPPtdMPPWCcZgW
qsbmGCsjHNhmhmhzTDznpnlQZlbWlZ
LTSSfSvggVVgBgfLtvvtTSczzpWnZQZnlnzpBcnWpQWc
FrLvrrrVPgdPftSHHdNsjTHjmGThhm
wGQlMjvMwpvjvZjZTZlWjplWJJTggDTgfCnntPgTJPbtPgSP
qNhJmcVmdJqhHnPnDNtnPDCg
LrrchqhRdLVzRdmhJcFFQWGGMjpGlvZzlQQv
ZqZMbZMfQZptpjlF
PJCggvHlwWHvSSvCJNvSPvDBtFDQThFQjtRQhhFTsVThQtsF
PwWCnBBCClcMMznMdG
rNwwQJrJrnQswrQrRRwCShBSLndZpdnhpGFSdhBp
PvzzWVzbclGFhLFGdZll
VWjPWvbjcVbVcGVzjcgzgwQQRRRrqwRJQwwstCRR
zjBMMzznjbssrBrMBbvHDmrlprlrpwGpwQDV
LhRwPPTLLNRZqScPWPWPTSmQvQQDGGdQHVDlmVpQGD
NtfhNwhLLNwRwRNcTBgnJMCBzsBFjsJfCz
jZjsWNDlPfClfMlM
GjqbVSqjhgvgSVSBCPmMmCmfpwTBfh
nGbjqtqcGzsLDFcJLs
ZQtmZdtdQcLndRncdQQLFjWWDHNPfhpnqhqsHNNDnpHs
TrMBGbJTwwlmDPPPWshWHfJq
wmVzbrwbwvBlBlVGtSVLSdFjdFtdjLVR
LBhZFhRPbbnPddMdPPlD
NQszQNczlCSlJSsg
mwmrVQwpQVWwTlvBpHHHFhZj
pzzDffWpQBzMpHvzMfRnTNhZdrdBcnLrcdrTLZ
msgJgtmbgmqJJcdrGcJjGn
bSVPgwntmVnngQWvWSSMpMMHWH
gmGMDHHdpngdrGmGcwbNCCnNcbbCSLwL
zQPPPffQQlVlsPFQFzQchZZbLZNVcbqbNqbZgq
PRjQzfRgRfjQBTfJQTlPFRHWmmvmWHGWrWvWWtjrdHpD
vfrHfqrLfLwwNHdvnthpnnFFpstn
gWcMclgmcRcWgDMWgBgGGFnntqQnGphdQhtbdFnh
qRWmRDlcDqWBBPwPNrZHrwSHjTfr
HVVbhdCdndhZSShMzRrzSM
qBjWqvtWvDJjTjjGJtJtnqBvZMrgSGZlgfSgSRrMQGQRMgMR
wmwtJsvjtTJwsNnVsHpdnsHdds
FCJNZDMPNCNvzqQJHqzGqv
hwjWcSTHwRpSWnQtGgQgGStgQQ
WpwhRHTRpcLRjwlwwTWBcWdlFbCrsPrrLCMDrZCFsCDPrZPM
DJjjShSGhGDSNdpfrWWcLFzrDWrDlF
wtqZgwMBBPVMCBPQggMwqMMzfLlWrWLLzsWcFzTzVTzLss
tgtwQqZBQQZbBZtPgbHpNJnJShcmJppSHh
tHrWmrdzzdHflmHmHrSmqswlqhqNgssMhGgghssn
pJcCBPPQPCcPpRpgwZNZBMnDhMsMBw
RJCvRRVcQpjLpCJPWrftWvSnrFffWbrz
jzlwwzDzTlQftzlWjfrBGBgVHBgpgBtPGVtP
vhsshbMbNhZpgZrrrpHcZr
qhdMqqSLSSbSJMqqSwwjzFzmjFQQFfHzLQ
gDhHNnphPPPNCprHFhHFdbdczzjNqbzjVcdbQTcc
tVJWBtVVZRWtjQbctjqcdj
RfvlGLvLLLlLMZBmZBRhHDVPnVHPHCgFCnhlpn
RFhZFTZvFdjlqqlRNCPwSSPCNPBSwC
spHGswpnWgJLLJCPGg
cWpDrVVbWfWbVfbsdQqcQzjjzlhdwqll
WWJPpQwWdQQPNpQvqlvvCblbvbvwLL
cmRMBMBTbSrTDRMcGBscTGfLZfvfvsCqhLlChZlLhfsC
TVbzGSMGVVgdpdPJpQ
lwsFfsZWGsGmsnlGQcPdBBdMbcPHfcCN
RVvSLtSTrTVrTFPcBdCHRcPHbNNb
LrqzLFTLrgSJLLLtTgJjVJvWlDDnjDWnWWlhlGWGhZWZhn
GQJCMGbrMbbCGrrGtcwhctGjNSvWpVVVRjNJqVqqBBRRJq
ssnglHHsnHzFmHnzHFPVDDSDRgVjvWDNpSSNpB
PZfHmndFzzfPZPZfCdwchwGcbwwhCdMW
DRGVQGmGQVnnGVmnnFpNbzCNRbRttCbpLztC
qdqHBdjTqPlcTchBjJMvvvLtLCcLggLvtmgb
fqhlHjdwqjjJTwldDmDmrGrrWFrDGZwD
wFscLVLrrVhwWgZPrcswgZWFTnQdtTMnpQtjdpqdqvqQMt
JRbHmmbDDSzDmDNpTnBBdpMHQtqtvp
JmCCbvRGzbbGJsLgZsVhgLwwGW
WDQwsBzWbBlMjdVpzTJVMj
fncRngntnPCpJgmdFpFWgm
RGZPZtZCfvWSvRZGSLvPccHwsrHbwHLrwHHQQsBDbllB
PlNZhwgpppccgrqVvttbBfrlls
CznSDDdHDRnRStVsVfDvfrtDZq
QCddZFSFLTmccQmw
rnwfVnclGPPFfSPSqBWZvvBBWqZvqWFh
zLgLQgJssspmQTJmsgjZNmqqzqdHbthDdDDWHbhqBBqb
QgmmjpNgCCZpjJLpmTrfrSrVRPfnrClfPwnS
zDzPPwvwqvPPBqjnqvDqBffSfcSNJpNVfccLLNffBR
MdTMZbgbmmTWGGdmssRCSNsSNVVVcJsNppsC
MJghbhHhbtMMdWhbJhHgdmWvnFzHDQPDjQDvHHwvQwvzwF
gGbqqRDrqDMdcBpVlpMG
WzhPCnWfqMcpBnnNLZ
fCqPHHJCfJhStwhWHbrrgvjFgbQbSbmbQs
fhcchnSpfsNpjVVqnqjrGHqq
zzlFLlPLWdggFqRBjqsrHrBTzz
FDwgFLZWlbbchpwshsCNcw
CmPlqqRJDHRDDsFv
MfSpBQQNNfBfrfVZsmVVdzzrHZmH
QSBSLSgmQBmwPCtgClhjPP
NPNsHHHNsPsvHwDqgpwlqt
rTRWSRrWRzgTzZrRVVLRQzjpbtmmGLlGDDbDwwmtblvDvw
nRzSRrjSVRrnjrgZfrfzNdPdMPBfBMhJhhBcPhcJ
LLhzQSDHDHNpNzHHJBQBMvMBqBRJBBqw
rmbdtmlWCCMnvJrn
FTVdmVgtjdtbWsvjjmdLSDcgHpDzShzDLPLSHh
VFFJQVWHtQVHHWbJRRRHwqPvpMLpLZZWLwlwMllL
jsngsdGssLvlqnZqZw
hhmfDjDsmDNjjNRNVqNVJRtQHJ
jvTnffrgFTwvqMzqGdMMSW
sPbCtCCQQLffZGdWNLWDDzLzGM
PQPBBtfZCZsmJPPplwwmTwpcTcmcgj
NBmBRCCsBTRNTndGdswnlwvwnw
fvbqrbPLqpGwScGGwbbb
HJDPJFJLJtpJHCvCFBBBBNNWvF
HJHgNQJBSlRRbJDRDb
RptsfnshscWMLMZDZp
njmrnPznnsTRTtPzFzRTswgQwqvVVwBNwwvjqCHqHq
CBMgBJCTNgQcsQspPpWjRrWrsWsn
mwLvHLGbdHbGzSHmvmvHzrhjjjPptjWGqZPPZhPRWWGP
vbbrLFwLFDJFDfFN
TnPvZSnQgQPHnnnQvgMSWppWNfWRpWfMtthMNDhN
wLJmLBmGFBFdLBbCBbVCVlsGsWhtHqthRRhqhtHHGqqf
LmHLbCjjBLVZzZSgzQgjrc
wdSwfpBhtFbStpftjSVhBwFrGrsQnQgnGrQmqCPmDrmmDb
zJvzLJLNZNscLzNHHLrGPvGGPrDDqGgDPDgC
RWsNNRMsHTHLHTlMczLHZLWtpFwfpthSjFtwFhjSVplwtj
QbrBDLGGRJMQJQJDbQbGvNscWNnTdvnvtnLcccvl
fqZgpVPZHPmfgPPjBFgcscvNNccdddtdNvdFTs
CgPpghfjjPgVmfBMMCRJQQJzJBwM
jLWDqLdWdwLfHwJwzSSfwS
gCgRRltMrlrCcCMzcBSVfZQfVNZNVSBVNNNh
gMrcPntccGgzgTMlMPrtDWFvLqqdLnDsmLLFFqvp
ttHJNccRRwmnsnHnHWMSwqfgvgfwSQZfQf
ShpLhhzTPBMpQqQgvM
zhbFjVdrjFjVljrVbdPddSTPHNssHnHlRNCHtRtsctJtGsRJ
zMVTscVhQhGGhClv
LfMJmgSBpLRfHmBPgpmJPSBdvQNtlHvrHvNNtNNNClGdGN
JFJmmSFFbFFbRJPBgFPmSBPMzzWWTDjjTsTqqwjVWbjjVVsZ
HZpCnwnggfFggbgLDcTb
SjvWjGzNGGzRjSGmMcLhvhMhFMCcmv
rjrVJNjVrzVNPrwtPwPCHBPB
SWwFbTzsSjPzpjFbsWPTWTcWLCLgLgLBZjGVDjCVBBgCBGCZ
lrJJttQcHqrHrvggHVBgBLffBC
lnhhcqNRJWzhTdsWFz
vzldvzlclbFjFvmtjZ
DDNMNStMsSsGnhSMwQjTQVgVbwMbVTTQ
DsDSCNNGpLtsNLpnNsqLppDzCBcdJHBzllcJfzJBPBdBlR
qWNfDvffbJBFDpNfmpbwhGhwjLgTrGwhbGGwrj
ZctMVCcVVQtTpthlnLtppw
QMcRSPMZcpCZqDFNRFHNJFFF
RmztpGSssNMzJRpCvqsCrqdHCBlBdw
gffPFDcqVbgqWgjlPlwCCrdBdllnBH
cFFZcbcqfQhgbcNJZRSMRtmNJptS
PZthPBWlPNPSPtmHHggFGgBJJbwg
qqzDvLLrfDpvvDLzqvnLzqpzbrCRGJRHwFCmHRwGwgwbbRCj
nnpnMfpMLTVqfmthmsMNSScMhS
dflvbdvpfffzpnNLNbWqtblqHjmVhVRhHrwrwrswhHnjsmwh
gSGMdMcJBgMTGPSPDVZhHhHZmDZhrwwjVm
CPJQGBGGPcSTFcTCScFtLLdWvptWLbNpNzvWQL
WThqhvvRDJDRhwcrscNDNFgDHNct
fnrZVnfVjrSGGLzZbnLzZLjVHstHHHQtgQbPpPcpHsscsFpN
SVjZSzZdndVCdSSZmTRvMWBRWvvWlrvmhJ
BcllhPPmMMBPcbRwgQtgHHgtmwgzmt
rpLqbrbTnNvqjLqLNqrNLvHzDtwpDCzFwggttFFHCQFQ
LrrrNLqjZSTsZZsvjbLjPhcBBlBsBcGPPcPlPVGP
HHhrggvSHDtCDsfF
ZMpLblppNZBDBwLzLLpMssCntfWdCFCnfCCtRNtq
lbmJlzzLMPMmlBzhSJVccSJhTvSTDh
sdjBBFqHscFnHTzCnRSnzgVTlC
LpWWtvZfrpbLpZpWftprLCCNMzCZMmmzTNNTmSSVSM
pLVtrtbGvpbpGLfPddHBscBQJJGcwsQq
hLcLnVVcfQBLZPVZnThfVVmjqjHNjgvNfdvpNdrrvvfp
lbRlWFHJtGNGpqmrqrCN
DzRRDFsbDtFtDJtWRztzJZVBQMhTsLhQZMZHVLcLcP
WgbdmgMmWDDvcPcpbz
jffpllHSpHRptRRGRntSVwvLSCCJDzcCcDLvCzPP
tRFrnlGfZrQpBpgQQsgF
TpbBZbCCHCGZNHbzGqgFdNlcFSdNlStSqg
wvWnWwLCPjJPJhMWtWdMfFSMgcdM
hhmvmJrJLJJJPvvhDjswCRGHHrHzBBHGVRQBzRRQ
zChCSBbpSsQscDHHQh
LNJJRgGltJDvfcrfgHfZ
lJNRGlLnNJtTGVMlFTbwSWqjBbzWWHSW
NDTJQDVwCTCJhVGDLfbBbBfbGqbfHBfBHb
lMgMrggMrmmtzMcgWdlmMlbsRjSRBsTRBWsSHSBTHRBj
cMPlgztzrPMznnMPpgddgdzpwDDNNwhNFCTwNZQFLTVTwV
ZgshQgzQnnwMtDwBwv
SFWFlFZRRcmlWmWRBCDwvwwftBtLmfLf
PjRFdTdWGddrGlPjcsJZpJzTqhzQJzNHhz
PgHQgddszgdGPWpMjljMcj
bSqTqnZLnDJSmnmZmtllGsnVtnWjGGWtjl
fqSLDbRSfBdHsRwsFdHd
RwHWZpCWhHvwvHCBMBpJMJGPJJnJgc
lztljTFljRRBBzBnBMnJMS
QbRljFtQfljbbFqNFrdZVrZfdCCwVwvddH
sHzztVzLTgnssPggHHsnCtzBmfBMrMccBBmqmrBqBCRqMf
ZhDQJhFDqjmSMrRF
dZpwDhNhhZpQJdDQpwnsGttGwLtRRTLRts
QJNhClVgPTTtPNCJJCtJhlNPZZRVZfvfzZzmvvzvsmZsvmzR
blBWBpdbLBDqBpszzffRsvdzjvvd
BLWpqBbqnDHqBbGlnWGBPcPJcHTTPrhtgNtCtgPc
jWVJqVwgsJcHCVlQVVQNBp
vGhGhTPtSSNCddSBCH
ZCCDtbDftZsqrrcnWW
hJThjThhVzVTZZwnNZRdgmzt
lrbSSddsrbPQpsvNtgPRmtHmvtnR
GQrspWdSGbDcsFFLBhCGVBjhjj
rHdlHdZDlTcflcNfcrCgcTWWpWQFsRWsFjRCsCjWCmhF
BnqbvQPLGLBPwqGmsVshsSWShGms
PzzPPQJPMJtJbbznPnDdrHlNldDNltrgtfDg
SmmMQhPSlmTwPpmnpllMSMPrccFDqFrDFGgqrDcCwfDgwq
bVdLLNvdQWVbJbQLVGfGDGfDgrFrqgqJgg
vjjWsbQdBsszhsHlhhPPSHsM
PqzJqNzsJgsgNqPdLJPPPNVpMMVWGlFWNFGMpWppGF
ZnZBjttQZcQZRTQDjQwGFlWMlGdGWVrWWlGn
ZRDBRSZDSdSLsqJHfSbzzL
rljJqtZlJqlJcvBNJBNQfQ
TVMWznvPMTFWznwPFFvwFbbBNBgbcNpQdNcBFQpb
mDnLWsPLvLMnnnmTzLzVCtlRRtjSljCZhDlhtqSq
fgWMHClGMWfgRWWWGCfmfgCSVQNTDFHTtddVQQDZNLDZtVVL
wSqbsvzpwpbpdFTNLQwLNTFN
zscjPnPqsJlmPJCJSC
GZSwQjGwGrCGwrTjdCTwdTBpqqlmNmVpNrNvplJqNNpl
zMfJnDcbRRDRFbzDFRLFBtqNmqqtNBmNBvNm
sHcJRRHzzfQTjjCjQjCH
wJCVVbJgCLCwGsMbbGTlsRWHsztZPZWtPrPrWrHzrz
DBqdvfqDBqFpWZFrtppZJp
djqNfQcjDQjMgbbwLjlJGn
TSwfZMfpQwcCCCCrbbCZ
PLJmGJnjqjrsCjMMVj
LnNNLLLnFFWmLFMGNMDgfRpDQSfwSfgQzBHwTS
CdjNCMmdCrVmCjJdVjFNMtMzhWwpGbpBhPZZZDbGPpDhpr
QSfHzlvgTQffSSHHclgfHnqPbPPPppBhpWDhwWvPhvbwwh
cQfQRgQnQsnsQSgHRQJsCFMsCjLzJJFjCdNC
ltLlJttmQdfVRhNmhB
gWWDrPSvCSWgMMMZBVBdTQPQZNZVPR
vCbwQzcQrCrLFHwJpHHGpp
VbRVvVHRbJVTzVLBVPtt
cSdgSZSZZFhnFcFwdDQcZZhgzpTlzLDzlWTvBWLztBtpLplT
hZZvdrcSZQZSSwncdHCqHmGHqJrCJqbNbq
lwWmsQlDbCZbVWZq
rRShhhhPjTsjTRvHhqfzqfqvBZZvBCZffC
scPThhRSjQmmNpplcg
FChtDTThDqZtjppjvgNvjl
LBwsVdVHLVvvpVGjjgjS
BbHLBfRcsHcBdMbdWJQPWFCQCZZhWrJPQp
zMtWCstzNrQLpbplFwQwhb
gDTDHGvvHVfVdGZVJGDGdnmbwmWFwfhpbnfjwwjpLl
GJcHVJdvZJVGZWHSSvTZMCzrzzRNSBtBNPBMqNBB
pLzZVVGGZmZVlmDsQglgsllc
WSvrjRjrMMFFnFjnrnrdjBRRgdsblQQPbpggsclNDDbPstDs
SMWRBrrrvSRBSSvWWWBTMTCqpZzLCCTCwJZwwzGZzqHL
TvfGwGZpPnSNgSSnGh
srLVHLcjsjVtHqjjrjFjcCqPBggqNQQnMqhgngnznNNB
VtdmPHLmtVHFLdmZWRJlWpWWWlmWfp
SbSbdTsrVrdhfSdDGJWGmNwWWPwTGP
BqlRpBMmllpmnpvvDJPZWPJwZcJgDD
FFRMCnRFtCMRlMplqMBRBppVbtzdrdhssrmHzVVSsVhVHz
dNrhhLsrshSmmRcPhm
WMCngCzCvzvMMpplQvzWlRBPcVStSmTSQbbVSPQmwm
MpzvWnllglJfqfMgsNdZHqNjdDsPHqqZ
rNvGZRsRcRRBtBCttB
DwPPQWnWWnPQnJlPhmTtBFBmqzhpmnFh
QwQQQlbPPMWwDdDwlVDJJPPdvdSjrjdrsgssLLsZLNBrNNNr
VjMMVzngnjQQfJDchZqGNqFPcg
SWBwTtWSFTHwFClHHmwBPcJJDhNGPJNPPhPPGhJt
CBvSBBBWHdmRTvRWRQFLQRnjnfLLzVbs
flSpvLlmZpCpZmVSBtlvHHjFHTdssZdjHFdTWdNh
RmQMQJRQJQmPgrzJrPcRQRJcWdNTGTGGFhGTdFhHThHGMTsF
RzJrqqcqPRqqJDDqttCpmtlwBpDflSLt
hBjPZbPBbWvTRnLRWntD
MNGQNsQwfzsdGfgTGfzQwwffmnCRDVmJLRLCvnvLDvJCDgRL
wTTdFldNHzTMljjFqphrBqhrZb
wDcMCbZbzPDcZDWQdrJLrQrZBLRBQr
FFSHStjtHgllgFdSNmlfFStBqRRssRsRJrLrjrrJBRVhLJ
fGggtfHtgWMwbCGdCT
RQrQDDbVGrRSfbVbGtmGtwHFWsCCzsJSJJHsJPJvWC
hphQnhZQNjlBBcMMpCsHwFjvvHWHWsFvjC
ppcnnBZqllTQfmrffbtGTDGt
dsDFsBZBhCFhshFrpBFnmLQmHmRgRbLqmmmRQDLm
PPBBNNNtGTwJNfTJffNttfLQgqLgHvHbqRwlgmblRvll
NSNTGTJTWPjGWMPSJJzrBSpzdFSddCFdncrs
bPzRlMPTzTMldJMnhswcjzfQVccQhc
HCCqNmNmQQmQssJn
pHptprtgRStTtMJt
nTmhrsPMsTfmHHGcSgtj
bJJwdlrJQLlvwlQDDwSbgffGVNjfgjNtVbcf
QlpDQFJdvdFqJdFpLvDFpLLnzZMnBMRRzMTqnrzqTRPznz
qRVRqBzgwqRpqRgVqQRPpQJJPrPhPGJnsGrCFdFJrZdG
ZvWDmMvmSvCndssrsJ
WcZcNWlcMjBQpzNTqVBp
DpLPZLDDlcgmDmhVgfgfWWRwhwwt
VrVMdbCrrBTjCMQQtMwQNSqMQW
VCBHdJHdvrrFsbsdrBJTdTzZcpmZGDGPlmzmlccFDZDn'''
def func1(s):
    sacks = s.split("\n")
    letters = []
    sum = 0
    for x in sacks:
        d = {}
        for c in x[:int(len(x)/2)]:
            d[c] = 1
        for c in x[int(len(x)/2):]:
            if d.get(c,0) == 1:
                letters.append(c)
                d[c] = d[c] + 1
    for c in letters:
        if ord(c) < ord('a'):
            sum = sum + ord(c) - ord('A') + 1 + 26
        else:
            sum = sum + ord(c) - ord('a') + 1
    return sum
def func2(s):
    sacks = s.split("\n")
    letters = []
    sum = 0
    counts = {}
    d = {}
    for x in sacks:
        initlen = len(letters)
        for c in x:
            d[c] = [True, d.get(c, [False, 0])[1]]
        for key in d:
            if d[key][0]:
                d[key][1] = d[key][1] + 1
                if d[key][1]==3:
                    letters.append(key)
        for key in d:
            d[key][0] = False
            if initlen != len(letters):
                d[key][1] = 0
    for c in letters:
        if ord(c) < ord('a'):
            sum = sum + ord(c) - ord('A') + 1 + 26
        else:
            sum = sum + ord(c) - ord('a') + 1
    return sum
print(func1(input))
print(func2(input))